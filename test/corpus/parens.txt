=============
unit-literal
=============

()

---

(source_file (unit_literal))

===================
unit-literal-spaces
===================

( 
    // there's a comment in here even!
)

---

(source_file (unit_literal))


========
grouping
========

(1)

---

(source_file
    (int_literal))

============
tuple-single
============

// kind of a nasty hack, but single-element-tuples are pretty rare.
(a,)

---

(source_file
    (tuple (identifier)))

=====
tuple
=====

(a, b)

---

(source_file
    (tuple (identifier) (identifier)))

===========
tuple-empty
===========

(,)

---

(source_file
    (tuple))

=====================
tuple-spread-trailing
=====================

(a...,)

---

(source_file
    (tuple (spread (identifier))))

========================
tuple-spread-no-trailing
========================

// A little surprising maybe, but this is unambiguously not parentheses used 
// for grouping, so it's a tuple!

(a...)

---

(source_file
    (tuple (spread (identifier))))


==========
fn-typical
==========

(a, b, c) => b;

---

(source_file
    (fn 
        (parameter_list (identifier) (identifier) (identifier))
        (identifier)))

=======
fn-unit
=======

() => 1;

---

(source_file (fn (parameter_list) (int_literal)))

=================
fn-trailing-comma
=================

(,) => 1;

---

(source_file (fn (parameter_list) (int_literal)))

========
fn-assoc
========

(a) => (b) => a;

---

(source_file 
    (fn (parameter_list (identifier)) 
        (fn (parameter_list (identifier))
            (identifier))))

=======
fn-prec
=======

(a) => a[0];

---

(source_file
    (fn (parameter_list (identifier))
        (subscript
            (identifier)
            (int_literal))))


==============
parens-nesting
==============

((() => (((()))))(()))

---

(source_file
    (call
        (fn (parameter_list)
            (unit_literal))
        (unit_literal)))
